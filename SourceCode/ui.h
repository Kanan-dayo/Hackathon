// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// ユーザーインターフェースヘッダー処理 [ui.h]
// Author : KOKI NISHIYAMA
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifndef _UI_H_
#define _UI_H_

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "scene.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 前方宣言
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// クラス
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class CUi
{
public:
	/* 列挙型 */
	// UIタイプ
	// ※追加可能
	// ※UIのファイル内の個数と同じにすること
	typedef enum
	{
		UITYPE_GAMEUI = 0,		// 仮で付けているので変えてもいいよ
		UITYPE_MAX
	} UITYPE;
	// UIの情報格納用型名
	//typedef std::vector<std::unique_ptr<CUi>> VEC_UNI_UI;
	// UIの情報格納用型名
	typedef std::vector<CUi*> VEC_P_UI;

	typedef struct UI_LOAD
	{
		UI_LOAD()
		{
			pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
			col = D3DXCOLOR(1.0f,1.0f,1.0f,1.0f);
			size = D3DXVECTOR2(0.0f, 0.0f);
			fRot = 0.0f;
			nTexType = 0;
		}
		D3DXVECTOR3 pos;			// 位置
		D3DXCOLOR col;				// 色
		D3DXVECTOR2 size;			// サイズ
		float fRot;					// 角度
		int nTexType;				// テクスチャータイプ
		bool nUse;
	} UI_LOAD, *P_UI_LOAD;

	/* 関数 */
	// コンストラクタ
	CUi();
	// デストラクタ
	~CUi();
#ifdef _DEBUG
	static void Debug(void);
#endif // _DEBUG
	static HRESULT Load(void);						// テキストの読み込み
	// UIマネージャーの読み込み
	static HRESULT UiManagerLoad(void);
	// UIスクリプトの読み込み
	static HRESULT UiScriptLoad(void);
	// 読み込んだリソースを開放する
	static void UnLoad(void);						// UnLoadする
	// 指定したUIの情報取得
	static std::vector<UI_LOAD> GetUi(
		UITYPE const &uitype
	) { return m_vec_UiLoad[uitype]; };
	// ファイル名の取得
	static std::string GetString(UITYPE const &uitype) { return m_vec_String[uitype]; };
protected:
private:
	/* 列挙型 */

	/* 関数 */
	// 初期化 //

	// 更新 //

	/* 変数 */
	static std::vector<UI_LOAD> m_vec_UiLoad[UITYPE_MAX];	// Ui読み込み用変数
	static std::vector<std::string> m_vec_String;			// ファイル情報読み書き用
};
#endif
