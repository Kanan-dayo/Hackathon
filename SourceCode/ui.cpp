// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// ユーザーインターフェース処理 [ui.cpp]
// Author : KOKI NISHIYAMA
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "ui.h"
/* 描画 */
#include "fade.h"
#include "game.h"
#include "Calculation.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define UI_MANAGER_FILE "data/LOAD/UI/ui_manager.txt"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
std::vector<CUi::UI_LOAD> CUi::m_vec_UiLoad[CUi::UITYPE_MAX] = {};	// Ui読み込み用変数
std::vector<std::string> CUi::m_vec_String = {};					// ファイル情報読み書き用

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// コンストラクタ
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CUi::CUi()
{

}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CUi::~CUi()
{
}

#ifdef _DEBUG
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デバッグ
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CUi::Debug(void)
{

}
#endif // _DEBUG

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// テキストの読み込み処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CUi::Load(void)
{
	// 変数宣言
	HRESULT hr;
	// UIマネージャーの読み込み
	hr = UiManagerLoad();
	// UIスクリプトの読み込み
	hr = UiScriptLoad();
	// 結果を返す
	return hr;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// UIマネージャーの読み込み
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CUi::UiManagerLoad(void)
{
	// 変数宣言
	// ファイルの中身格納用
	std::vector<std::vector<std::string>> vsvec_Contens;
	// ファイルの中身を取得する
	vsvec_Contens = CCalculation::FileContens(UI_MANAGER_FILE, '\0');
	// 行ごとに回す
	for (int nCntLine = 0; nCntLine < (signed)vsvec_Contens.size(); nCntLine++)
	{
		// 項目ごとに回す
		for (int nCntItem = 0; nCntItem < (signed)vsvec_Contens.at(nCntLine).size(); nCntItem++)
		{
			switch (nCntItem)
			{
				// パス情報
			case 0:
				m_vec_String.emplace_back(vsvec_Contens.at(nCntLine).at(nCntItem));
				break;
			default:
				break;
			}
		}
	}
	// ファイルの中身の開放
	for (int nCntLine = 0; nCntLine < (signed)vsvec_Contens.size(); nCntLine++)
	{
		vsvec_Contens[nCntLine].clear();
		vsvec_Contens[nCntLine].shrink_to_fit();
	}
	vsvec_Contens.clear();
	vsvec_Contens.shrink_to_fit();

	return S_OK;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// UIスクリプトの読み込み
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CUi::UiScriptLoad(void)
{
	// ファイルポイント
	FILE *pFile;

	// 変数宣言
	int  nCntError = 0;				// カウントロード
	int	nCntUi = 0;					// カウントUI
	char cComp[128];				// 特定の文字列の比較
	char cRaedText[128];			// 文字として読み取り用
	char cHeadText[128];			// 比較するよう
	char cDie[128];					// 不必要な文字

	for (int nCntLoad = 0; nCntLoad < (signed)m_vec_String.size(); nCntLoad++)
	{
		// 読み込んだUIファイルの上限を超えたとき
		// ->ループを抜ける
		if (nCntLoad >= UITYPE_MAX)
		{
			break;
		}
		nCntUi = 0;
		cHeadText[0] = '\0';
		cHeadText[0] = '\0';
		// ファイルが開かれていなかったら
		if ((pFile = fopen(m_vec_String[nCntLoad].c_str(), "r")) == NULL)
		{// メッセージの表示
#ifdef _DEBUG
			CCalculation::Messanger("UIのテキストファイルが見つかりませんでした");
#endif // _DEBUG
			continue;
		}
		// スクリプトが存在しているかチェック
		if (!CCalculation::Existenceofscript(pFile))
		{
#ifdef _DEBUG
			CCalculation::Messanger("UIの[SCRIP]が見つかりません\n終了してください");
#endif // _DEBUG
			fclose(pFile);
			continue;
		}
		// エンドスクリプトが来るまでループ
		while (strcmp(cHeadText, "END_SCRIPT") != 0)
		{
			fgets(cRaedText, sizeof(cRaedText), pFile);
			sscanf(cRaedText, "%s", &cHeadText);

			// 改行だったら
			if (strcmp(cHeadText, "\n") == 0)
			{
			}

			// モデルセットが来たら
			else if (strcmp(cHeadText, "SET") == 0)
			{
				// 格納する
				m_vec_UiLoad[nCntLoad].emplace_back(UI_LOAD());
				// 比較の初期化
				cComp[0] = '\0';
				// 読み込んど文字列代入
				sscanf(cRaedText, "%s %s", &cDie, &cComp);
				// エンドモデルセットが来るまでループ
				while (strcmp(cHeadText, "END_SET") != 0)
				{
					fgets(cRaedText, sizeof(cRaedText), pFile);
					sscanf(cRaedText, "%s", &cHeadText);

					// 位置情報読み込み
					if (strcmp(cHeadText, "POS") == 0)
					{
						sscanf(cRaedText, "%s %s %f %f %f", &cDie, &cDie,
							&m_vec_UiLoad[nCntLoad].at(nCntUi).pos.x,
							&m_vec_UiLoad[nCntLoad].at(nCntUi).pos.y,
							&m_vec_UiLoad[nCntLoad].at(nCntUi).pos.z);
					}
					// 位置情報読み込み
					else if (strcmp(cHeadText, "COL") == 0)
					{
						sscanf(cRaedText, "%s %s %f %f %f %f", &cDie, &cDie,
							&m_vec_UiLoad[nCntLoad].at(nCntUi).col.r,
							&m_vec_UiLoad[nCntLoad].at(nCntUi).col.g,
							&m_vec_UiLoad[nCntLoad].at(nCntUi).col.b,
							&m_vec_UiLoad[nCntLoad].at(nCntUi).col.a
						);
					}
					// サイズ情報読み込み
					else if (strcmp(cHeadText, "SIZE") == 0)
					{
						sscanf(cRaedText, "%s %s %f %f", &cDie, &cDie,
							&m_vec_UiLoad[nCntLoad].at(nCntUi).size.x,
							&m_vec_UiLoad[nCntLoad].at(nCntUi).size.y);
					}
					// 角度情報読み込み
					else if (strcmp(cHeadText, "ROT") == 0)
					{
						sscanf(cRaedText, "%s %s %f", &cDie, &cDie,
							&m_vec_UiLoad[nCntLoad].at(nCntUi).fRot);
					}
					// テクスチャータイプ情報読み込み
					else if (strcmp(cHeadText, "TEXTYPE") == 0)
					{
						sscanf(cRaedText, "%s %s %d", &cDie, &cDie,
							&m_vec_UiLoad[nCntLoad].at(nCntUi).nTexType);
					}
					// エラーカウントをインクリメント
					nCntError++;
					if (nCntError > FILELINE_ERROW)
					{// エラー
						nCntError = 0;
						fclose(pFile);
						CCalculation::Messanger("UIセットがありません");
						return E_FAIL;
					}
				}
				// UIカウントアップ
				nCntUi++;
			}
			// エラーカウントをインクリメント
			nCntError++;
			if (nCntError > FILELINE_ERROW)
			{// エラー
				nCntError = 0;
				fclose(pFile);
				CCalculation::Messanger("エンドスクリプトがありません");
				return E_FAIL;
			}
		}
		fclose(pFile);
	}
	return S_OK;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 全ソースの開放処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CUi::UnLoad(void)
{
	// 全UIタイプのループ
	for (int nCntLoad = 0; nCntLoad < UITYPE_MAX; nCntLoad++)
	{
		// std::vectorの開放
		std::vector<UI_LOAD>().swap(m_vec_UiLoad[nCntLoad]);
	}
	m_vec_String.clear();
	m_vec_String.shrink_to_fit();
}
