//*************************************************************************************************************
//
// ランキング処理 [ranking.h]
// Author:IKUTO SEKINE
//
//*************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------
// インクルードファイル
//-------------------------------------------------------------------------------------------------------------
#include "ranking.h"
#include "2DUI.h"

#include "renderer.h"
#include "keyboard.h"
#include "fade.h"
#include "score.h"

//-------------------------------------------------------------------------------------------------------------
// マクロ定義
//-------------------------------------------------------------------------------------------------------------
#define SIZE_SCORE	(D3DXVECTOR2(40.0f, 80.0f))	// スコアのサイズ

//-------------------------------------------------------------------------------------------------------------
// 静的メンバ変数の初期化
//-------------------------------------------------------------------------------------------------------------
D3DXVECTOR3 CRanking::m_scorePos[MAX_NUMRANK] =
{
	D3DXVECTOR3(SCREEN_WIDTH / 2, 100.0f, 0.0f),
	D3DXVECTOR3(SCREEN_WIDTH / 2, 200.0f, 0.0f),
	D3DXVECTOR3(SCREEN_WIDTH / 2, 300.0f, 0.0f),
	D3DXVECTOR3(SCREEN_WIDTH / 2, 400.0f, 0.0f),
	D3DXVECTOR3(SCREEN_WIDTH / 2, 500.0f, 0.0f)
};

//-------------------------------------------------------------------------------------------------------------
// 生成
//-------------------------------------------------------------------------------------------------------------
CRanking * CRanking::Create(void)
{
	// メモリ確保
	CRanking *pRanking = new CRanking;
	// 初期化
	pRanking->Init();
	// 値を返す
	return pRanking;
}

//-------------------------------------------------------------------------------------------------------------
// 初期化
//-------------------------------------------------------------------------------------------------------------
void CRanking::Init(void)
{
	for (int nCntScore = 0; nCntScore < MAX_NUMRANK; nCntScore++)
	{
		m_pScore[nCntScore] = CScore::Create(m_scorePos[nCntScore], SIZE_SCORE, CScore::GetDefaultScore(nCntScore));
	}
}

//-------------------------------------------------------------------------------------------------------------
// 終了
//-------------------------------------------------------------------------------------------------------------
void CRanking::Uninit(void)
{
	for (int nCntScore = 0; nCntScore < MAX_NUMRANK; nCntScore++)
	{
		if (m_pScore[nCntScore])
		{
			m_pScore[nCntScore]->Uninit();
			delete m_pScore[nCntScore];
			m_pScore[nCntScore] = nullptr;
		}
	}
}

//-------------------------------------------------------------------------------------------------------------
// 更新
//-------------------------------------------------------------------------------------------------------------
void CRanking::Update(void)
{
	for (int nCntScore = 0; nCntScore < MAX_NUMRANK; nCntScore++)
	{
		if (m_pScore[nCntScore])
			m_pScore[nCntScore]->Update();
	}

	// キー入力でタイトルへ
	if (CManager::GetKeyboard().GetTrigger(DIK_RETURN))
		CManager::GetRenderer().GetFade()->SetFade(CManager::MODE_TITLE);
}

//-------------------------------------------------------------------------------------------------------------
// 描画
//-------------------------------------------------------------------------------------------------------------
void CRanking::Draw(void)
{
	for (int nCntScore = 0; nCntScore < MAX_NUMRANK; nCntScore++)
	{
		if (m_pScore[nCntScore])
			m_pScore[nCntScore]->Draw();
	}
}
